@extends('layouts.app')
@section('content')

<section>
    <div class="container">
        <h1>Book Your Photoshoot</h1>
        
        <div class="booking-container">
            <div class="calendar-container">
                <!-- Month navigation -->
                <div class="month-header">
                    <button class="nav-btn" id="prev-month">&laquo;</button>
                    <div class="month-display" id="month-display">April 2025</div>
                    <button class="nav-btn" id="next-month">&raquo;</button>
                </div>
                
                <!-- Calendar -->
                <table class="calendar-grid">
                    <thead>
                        <tr>
                            <th>Sun</th>
                            <th>Mon</th>
                            <th>Tue</th>
                            <th>Wed</th>
                            <th>Thu</th>
                            <th>Fri</th>
                            <th>Sat</th>
                        </tr>
                    </thead>
                    <tbody id="calendar-body">
                        <!-- Calendar will be generated by JavaScript -->
                    </tbody>
                </table>
                
                <!-- Time slots section -->
                <h2 class="section-title">Available Time Slots</h2>
                <div id="time-slots-container">
                    <p class="text-muted">Please select a date to view available times</p>
                </div>
            </div>
            
            <div class="summary-container">
                <h2 class="section-title">Booking Summary</h2>
                
                <form id="booking-form" method="POST" action="{{ route('bookings.store') }}">
                    @csrf
                    <input type="hidden" name="booking_date" id="booking_date">
                    <input type="hidden" name="start_time" id="start_time">
                    
                    <div class="summary-item">
                        <label class="summary-label">Date:</label>
                        <div class="summary-value" id="summary-date">-</div>
                    </div>
                    
                    <div class="summary-item">
                        <label class="summary-label">Time:</label>
                        <div class="summary-value" id="summary-time">-</div>
                    </div>
                    
                    <div class="summary-item">
                        <label class="summary-label" for="session-type">Session Type:</label>
                        <select class="form-select" id="session-type" name="service_type">
                            <option value="Portrait Session (1 hour)">Portrait Session (1 hour)</option>
                            <option value="Family Session (2 hours)">Family Session (2 hours)</option>
                            <option value="Product Photography (1 hour)">Product Photography (1 hour)</option>
                            <option value="Event Coverage (3 hours)">Event Coverage (3 hours)</option>
                        </select>
                    </div>
                    
                    <div class="summary-item">
                        <label class="summary-label" for="location">Location:</label>
                        <select class="form-select" id="location" name="location">
                            <option value="Indoor">Indoor</option>
                            <option value="Outdoor">Outdoor</option>
                        </select>
                    </div>
                    
                    <div class="summary-item">
                        <label class="summary-label" for="notes">Notes:</label>
                        <textarea class="form-control" id="notes" name="notes" placeholder="Any additional notes about your booking"></textarea>
                    </div>
                    
                    <button type="submit" class="btn-confirm">Confirm Booking</button>
                </form>
            </div>
        </div>
    </div>
</section>

<!-- Loading overlay -->
<div id="loading-overlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 9999;">
    <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); color: white; font-size: 1.5rem;">Loading...</div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // State variables
    let selectedDate = null;
    let selectedTime = null;
    
    // Current month and year
    const today = new Date();
    let currentMonth = today.getMonth();
    let currentYear = today.getFullYear();
    
    // Will store booked slots fetched from the database
    let bookedSlots = [];
    
    // Loading indicators
    function showLoading() {
        document.getElementById('loading-overlay').style.display = 'flex';
    }
    
    function hideLoading() {
        document.getElementById('loading-overlay').style.display = 'none';
    }
    
    // Fetch booked slots from the server
    async function fetchBookedSlots() {
        showLoading();
        try {
            const response = await fetch('/api/bookings/booked-slots');
            if (!response.ok) {
                throw new Error('Failed to fetch booked slots');
            }
            
            const data = await response.json();
            bookedSlots = data.map(booking => ({
                date: booking.booking_date,
                time: formatAMPM(booking.start_time)
            }));
            
            // If a date is currently selected, update its time slots
            if (selectedDate) {
                updateTimeSlots(selectedDate);
            }
            
            // Update calendar to show booked dates
            generateCalendar(currentMonth, currentYear);
        } catch (error) {
            console.error('Error fetching booked slots:', error);
        } finally {
            hideLoading();
        }
    }
    
    // Format time from 24h (HH:MM:SS) to 12h format with AM/PM
    function formatAMPM(timeString) {
        if (!timeString) return '';
        
        const [hours, minutes] = timeString.split(':');
        const hour = parseInt(hours);
        const ampm = hour >= 12 ? 'PM' : 'AM';
        const displayHour = hour % 12 || 12;
        
        return `${displayHour}:${minutes} ${ampm}`;
    }
    
    // All possible time slots (every 1.5 hours until 10 PM)
    const allTimeSlots = [
        '9:00 AM',
        '10:30 AM',
        '12:00 PM',
        '1:00 PM',
        '2:30 PM',
        '4:00 PM',
        '5:30 PM',
        '7:00 PM',
        '8:30 PM',
        '10:00 PM'
    ];
    
    // Generate the calendar
    function generateCalendar(month, year) {
        // First day of the month
        const firstDay = new Date(year, month, 1);
        // Last day of the month
        const lastDay = new Date(year, month + 1, 0);
        const daysInMonth = lastDay.getDate();
        const startingDay = firstDay.getDay();
        
        // Update month display
        document.getElementById('month-display').textContent = `${getMonthName(month)} ${year}`;
        
        // Clear previous calendar
        const calendarBody = document.getElementById('calendar-body');
        calendarBody.innerHTML = '';
        
        // Create calendar rows
        let date = 1;
        for (let i = 0; i < 6; i++) {
            // Stop if we've reached the end of the month
            if (date > daysInMonth) break;
            
            const row = document.createElement('tr');
            
            // Create cells for each day of the week
            for (let j = 0; j < 7; j++) {
                const cell = document.createElement('td');
                
                if ((i === 0 && j < startingDay) || date > daysInMonth) {
                    // Empty cell
                    cell.innerHTML = '';
                } else {
                    // Create calendar day
                    const dayElement = document.createElement('div');
                    dayElement.className = 'calendar-day';
                    dayElement.textContent = date;
                    
                    // Format date for comparison (YYYY-MM-DD)
                    const formattedDate = formatDate(new Date(year, month, date));
                    dayElement.dataset.date = formattedDate;
                    
                    // Check if date is in the past
                    const cellDate = new Date(year, month, date);
                    cellDate.setHours(0, 0, 0, 0);
                    
                    today.setHours(0, 0, 0, 0);
                    if (cellDate < today) {
                        dayElement.classList.add('disabled');
                    } else {
                        // Check if this is the selected date
                        if (formattedDate === selectedDate) {
                            dayElement.classList.add('selected');
                        }
                        
                        // Add click handler
                        dayElement.addEventListener('click', function() {
                            if (!dayElement.classList.contains('disabled')) {
                                // Remove selected class from all days
                                document.querySelectorAll('.calendar-day.selected').forEach(el => {
                                    el.classList.remove('selected');
                                });
                                
                                // Add selected class to this day
                                dayElement.classList.add('selected');
                                
                                // Update selected date
                                selectedDate = formattedDate;
                                document.getElementById('booking_date').value = selectedDate;
                                
                                // Reset selected time
                                selectedTime = null;
                                
                                // Update time slots and summary
                                updateTimeSlots(formattedDate);
                                updateSummary();
                            }
                        });
                    }
                    
                    cell.appendChild(dayElement);
                    date++;
                }
                
                row.appendChild(cell);
            }
            
            calendarBody.appendChild(row);
        }
    }
    
    // Update available time slots for the selected date
    function updateTimeSlots(date) {
        const container = document.getElementById('time-slots-container');
        
        // Get booked times for this date
        const bookedTimes = bookedSlots
            .filter(slot => slot.date === date)
            .map(slot => slot.time);
        
        // Create time slots container
        const timeSlotsDiv = document.createElement('div');
        timeSlotsDiv.className = 'time-slots';
        
        // Add time slots
        allTimeSlots.forEach(time => {
            const timeSlot = document.createElement('div');
            timeSlot.className = 'time-slot';
            timeSlot.textContent = time;
            
            // Check if this time is booked
            if (bookedTimes.includes(time)) {
                timeSlot.classList.add('disabled');
                timeSlot.textContent += ' (Booked)';
            } else {
                // Check if this is the selected time
                if (time === selectedTime && date === selectedDate) {
                    timeSlot.classList.add('selected');
                }
                
                // Add click handler
                timeSlot.addEventListener('click', function() {
                    // Remove selected class from all time slots
                    document.querySelectorAll('.time-slot.selected').forEach(el => {
                        el.classList.remove('selected');
                    });
                    
                    // Add selected class to this time slot
                    timeSlot.classList.add('selected');
                    
                    // Update selected time
                    selectedTime = time;
                    document.getElementById('start_time').value = convertTo24Hour(time);
                    
                    // Update summary
                    updateSummary();
                });
            }
            
            timeSlotsDiv.appendChild(timeSlot);
        });
        
        container.innerHTML = '';
        container.appendChild(timeSlotsDiv);
        
        // If no time slots are available
        if (timeSlotsDiv.children.length === 0) {
            container.innerHTML = '<p class="text-muted">No available times for this date</p>';
        }
    }
    
    // Update the booking summary
    function updateSummary() {
        document.getElementById('summary-date').textContent = selectedDate ? formatDisplayDate(selectedDate) : '-';
        document.getElementById('summary-time').textContent = selectedTime || '-';
    }
    
    // Helper function: Get month name
    function getMonthName(monthIndex) {
        const months = [
            'January', 'February', 'March', 'April', 'May', 'June',
            'July', 'August', 'September', 'October', 'November', 'December'
        ];
        return months[monthIndex];
    }
    
    // Helper function: Format date as YYYY-MM-DD
    function formatDate(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    }
    
    // Format date for display
    function formatDisplayDate(dateString) {
        const date = new Date(dateString);
        const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
        return date.toLocaleDateString('en-US', options);
    }
    
    // Helper function: Convert time from 12h to 24h format
    function convertTo24Hour(time12h) {
        const [time, period] = time12h.split(' ');
        let [hours, minutes] = time.split(':');
        
        hours = parseInt(hours);
        
        if (period === 'PM' && hours < 12) {
            hours += 12;
        } else if (period === 'AM' && hours === 12) {
            hours = 0;
        }
        
        return `${String(hours).padStart(2, '0')}:${minutes}:00`;
    }
    
    // Initialize the calendar and fetch booked slots
    generateCalendar(currentMonth, currentYear);
    fetchBookedSlots();
    
    // Set up event listeners
    document.getElementById('prev-month').addEventListener('click', function() {
        if (currentMonth === 0) {
            currentMonth = 11;
            currentYear--;
        } else {
            currentMonth--;
        }
        generateCalendar(currentMonth, currentYear);
    });
    
    document.getElementById('next-month').addEventListener('click', function() {
        if (currentMonth === 11) {
            currentMonth = 0;
            currentYear++;
        } else {
            currentMonth++;
        }
        generateCalendar(currentMonth, currentYear);
    });
    
    document.getElementById('booking-form').addEventListener('submit', function(e) {
        e.preventDefault();
        
        if (!selectedDate || !selectedTime) {
            alert('Please select both a date and time for your booking.');
            return;
        }
        
        showLoading();
        
        // Prepare the form data
        const formData = new FormData(this);
        
        // Send the booking data to the server
        fetch(this.action, {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            hideLoading();
            
            if (data.success) {
                // Redirect to confirmation page if provided
                if (data.redirect) {
                    window.location.href = data.redirect;
                } else {
                    alert('Your booking has been confirmed!');
                    
                    // Reset the form
                    selectedDate = null;
                    selectedTime = null;
                    document.getElementById('notes').value = '';
                    
                    // Refresh booked slots and UI
                    fetchBookedSlots();
                    document.getElementById('time-slots-container').innerHTML = '<p class="text-muted">Please select a date to view available times</p>';
                    updateSummary();
                }
            } else {
                alert(data.message || 'There was an error with your booking. Please try again.');
            }
        })
        .catch(error => {
            hideLoading();
            console.error('Error saving booking:', error);
            alert('There was an error saving your booking. Please try again.');
        });
    });
});
</script>

<style>
body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    color: #333;
    background-color: #f8f9fa;
}

.container {
    max-width: 1000px;
    margin: 40px auto;
}

h1 {
    font-size: 2.5rem;
    margin-bottom: 30px;
}

.booking-container {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
}

.calendar-container {
    background: white;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    flex: 1;
    min-width: 300px;
}

.summary-container {
    background: white;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    flex: 1;
    min-width: 300px;
}

.month-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.month-display {
    font-size: 1.5rem;
    font-weight: 500;
    text-align: center;
    flex-grow: 1;
}

.nav-btn {
    width: 40px;
    height: 40px;
    border: 1px solid rgb(17, 102, 187);
    border-radius: 4px;
    background: transparent;
    cursor: pointer;
    font-size: 1.5rem;
    color: rgb(17, 102, 187);
}

.nav-btn:hover {
    background-color: rgb(17, 102, 187);
    color: white;
}

.calendar-grid {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 30px;
}

.calendar-grid th {
    padding: 10px;
    text-align: center;
    font-weight: 500;
}

.calendar-grid td {
    text-align: center;
    padding: 5px;
}

.calendar-day {
    width: 40px;
    height: 40px;
    line-height: 40px;
    margin: 0 auto;
    border-radius: 50%;
    cursor: pointer;
}

.calendar-day:hover:not(.disabled) {
    background-color: #f0f0f0;
}

.calendar-day.selected {
    background-color: #007bff;
    color: white;
}

.calendar-day.disabled {
    color: #c0c0c0;
    cursor: default;
}

.text-muted {
    color: #6c757d;
    text-align: center;
    padding: 20px;
}

.time-slots {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
}

.time-slot {
    flex: 1 0 calc(33.333% - 10px);
    min-width: 100px;
    padding: 10px;
    text-align: center;
    border: 1px solid #dee2e6;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
}

.time-slot:hover:not(.disabled) {
    border-color: #6c757d;
    background-color: #f8f9fa;
}

.time-slot.selected {
    background-color: #6c757d;
    color: white;
    border-color: #6c757d;
}

.time-slot.disabled {
    color: #c0c0c0;
    background-color: #f8f9fa;
    cursor: default;
}

.section-title {
    font-size: 1.5rem;
    margin-bottom: 20px;
    font-weight: 500;
}

.summary-item {
    margin-bottom: 20px;
}

.summary-label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
}

.summary-value {
    font-size: 1.1rem;
}

.form-control, .form-select {
    width: 100%;
    padding: 10px;
    border: 1px solid #dee2e6;
    border-radius: 4px;
}

textarea.form-control {
    min-height: 100px;
    resize: vertical;
}

.btn-confirm {
    width: 100%;
    padding: 12px;
    background-color: #000;
    border: none;
    color: white;
    font-weight: 500;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s;
}

.btn-confirm:hover {
    background-color: #333;
}

@media (max-width: 768px) {
    .booking-container {
        flex-direction: column;
    }
    
    .time-slot {
        flex: 1 0 calc(50% - 10px);
    }
}
</style>
@endsection